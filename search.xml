<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GAMES101-课程2</title>
    <url>/2024/04/01/GAMES101-%E8%AF%BE%E7%A8%8B2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>GAMES101</category>
      </categories>
      <tags>
        <tag>GAMES101</tag>
      </tags>
  </entry>
  <entry>
    <title>GAMES101作业1</title>
    <url>/2024/04/01/GAMES101%E4%BD%9C%E4%B8%9A1/</url>
    <content><![CDATA[<p><a href="http://games-cn.org/forums/topic/graphics-intro-hw1/">作业1下载链接</a><br><a href="http://games-cn.org/forums/topic/graphics-intro-hw1/">作业1ans</a></p>
<h2 id="作业描述"><a href="#作业描述" class="headerlink" title="作业描述"></a>作业描述</h2><p>本次作业的任务是填写一个旋转矩阵和一个透视投影矩阵。给定三维下三个点v0(2.0, 0.0,−2.0), v1(0.0, 2.0,−2.0), v2(−2.0, 0.0,−2.0), 你需要将这三个点的坐标变换为屏幕坐标并在屏幕上绘制出对应的线框三角(在代码框架中，我们已经提供了draw_triangle 函数，所以你只需要去构建变换矩阵即可)。简而言之，我们需要进行模型、视图、投影、视口等变换来将三角形显示在屏幕上。在提供的代码框架中，我们留下了模型变换和投影变换的部分给你去完成。</p>
<p>以下是你需要在main.cpp 中修改的函数（请不要修改任何的函数名和其他已经填写好的函数，并保证提交的代码是已经完成且能运行的）：</p>
<ul>
<li><strong>get_model_matrix(float rotation_angle)</strong>: 逐个元素地构建模型变换矩阵并返回该矩阵。在此函数中，你只需要实现三维中绕z 轴旋转的变换矩阵，而不用处理平移与缩放。</li>
<li><strong>get_projection_matrix(float eye_fov, float aspect_ratio, float zNear, float zFar)</strong>: 使用给定的参数逐个元素地构建透视投影矩阵并返回该矩阵。zNear是近平面到视点的距离，zFar是远平面到视点的距离。</li>
<li><strong>[Optional] main()</strong>: 自行补充你所需的其他操作。</li>
</ul>
<p>当你在上述函数中正确地构建了模型与投影矩阵，光栅化器会创建一个窗口显示出线框三角形。由于光栅化器是逐帧渲染与绘制的，所以你可以使用A和D 键去将该三角形绕z 轴旋转(此处有一项提高作业，将三角形绕任意过原点的轴旋转)。当你按下Esc 键时，窗口会关闭且程序终止。<br> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;eigen3/Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;eigen3/Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Vector3f  <span class="title">p</span><span class="params">(<span class="number">2.0</span>,<span class="number">1.0</span>)</span>,Pc</span>;</span><br><span class="line">    <span class="type">float</span> a=<span class="built_in">cos</span>(<span class="number">45</span>/<span class="number">180.0</span>*<span class="built_in">acos</span>(<span class="number">-1</span>)),b=<span class="built_in">sin</span>(<span class="number">45</span>/<span class="number">180.0</span>*<span class="built_in">acos</span>(<span class="number">-1</span>));</span><br><span class="line">    Matrix3f R,M;</span><br><span class="line">    R&lt;&lt;a,-b,<span class="number">0</span>,b,a,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line">    M&lt;&lt;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line">    Pc=M*R*p;</span><br><span class="line">    cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;Pc&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>代码完成后就是编译过程，打开终端依次输入一下命令：<br> <figure class="highlight console"><table><tr><td class="code"><pre><span class="line">mkdir build </span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">./Transformation</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>GAMES101</category>
        <category>assignment</category>
      </categories>
      <tags>
        <tag>GAMES101</tag>
      </tags>
  </entry>
  <entry>
    <title>GAMES101作业0</title>
    <url>/2024/04/01/GAMES101%E4%BD%9C%E4%B8%9A0/</url>
    <content><![CDATA[<h1 id="GAMES101作业0——虚拟环境配置以及二维坐标变换"><a href="#GAMES101作业0——虚拟环境配置以及二维坐标变换" class="headerlink" title="GAMES101作业0——虚拟环境配置以及二维坐标变换"></a>GAMES101作业0——虚拟环境配置以及二维坐标变换</h1><p><a href="http://games-cn.org/forums/topic/graphics-intro-hw0/">作业0下载链接</a><br><a href="http://games-cn.org/forums/topic/graphics-intro-hw0/">作业0ans</a></p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><p>本课程使用的是 <strong>Oracle VirtualBox</strong>虚拟机，下载链接如下：</p>
<p><strong>Windows系统</strong>：<a href="https://download.virtualbox.org/virtualbox/6.1.4/VirtualBox-6.1.4-136177-Win.exe">https://download.virtualbox.org/virtualbox/6.1.4/VirtualBox-6.1.4-136177-Win.exe</a></p>
<p><strong>Mac OS系统</strong>： <a href="https://download.virtualbox.org/virtualbox/6.1.4/VirtualBox-6.1.4-136177-OSX.dmg">https://download.virtualbox.org/virtualbox/6.1.4/VirtualBox-6.1.4-136177-OSX.dmg</a></p>
<p><strong>Linux内核的系统</strong>： <a href="https://www.virtualbox.org/wiki/Linux_Downloads%EF%BC%8C">https://www.virtualbox.org/wiki/Linux_Downloads，</a></p>
<p>安装直接按照指示进行完成安装</p>
<h3 id="安装虚拟机-1"><a href="#安装虚拟机-1" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><p>虚拟磁盘的下载地址为：<a href="https://drive.google.com/drive/folders10Z_GCxwN-k3GvdbDj0nzh8dx6BRPqfk2?usp=sharing">https://drive.google.com/drive/folders10Z_GCxwN-k3GvdbDj0nzh8dx6BRPqfk2?usp=sharing</a> ,下载完成后得到GAMES101_Ubuntu 18.04.2(64bit).rar，将其解压后得到虚拟硬盘文件GAMES101_Ubuntu 18.04.2 (64bit).vdi。</p>
<h3 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h3><p>打开Virtual Box，点击新建，设置类型为Linux，版本为Ubuntu-64 bit，<br>建议设置虚拟机的内存大小为2GB，然后选择使用已有的虚拟硬盘文件，设置为<br>之前解压得到的GAMES101_Ubuntu 18.04.2 (64bit).vdi，最后点击创建就<br>完成了虚拟机的配置工作。<br><img src="https://s2.loli.net/2023/05/30/X6At8BYSba7jNI9.png" alt="配置虚拟机"><br>之后就可以使用创建好的虚拟机了，选中刚刚创建好的虚拟机，点击右侧上方的启动按钮就可以打开虚拟机了，Ubuntu 系统的密码为<strong>Ilovegraphics</strong>。<br><font color=Red>注：可能会出现打不开虚拟机，错误原因为 <strong>Failed to get device handle and&#x2F;or partition ID</strong> </font> <a href="https://blog.csdn.net/weixin_42094764/article/details/125101332">解决方法</a></p>
<h3 id="安装Guest-Additions"><a href="#安装Guest-Additions" class="headerlink" title="安装Guest Additions"></a>安装Guest Additions</h3><p>进入系统后，点击上方菜单的设备，点击安装增强功能，如下图所示。安装完成后，重启虚拟机系统就完成了Guest Additions 的安装。<br><img src="https://s2.loli.net/2023/05/30/YU1BOHVrWD8IKsp.png" alt="安装Guest Additions"></p>
<h3 id="作业框架的传输及编辑"><a href="#作业框架的传输及编辑" class="headerlink" title="作业框架的传输及编辑"></a>作业框架的传输及编辑</h3><p>作业框架的导入和导出有很多种方式，这里只提一种。当你在你的主机上下载好作业框架后，直接将其拖进虚拟机系统里。这里需要开启Virtual Box 的拖放功能：进入虚拟机系统后，点击上方菜单的设备，将拖放功能设置为双向即可。<br><img src="https://s2.loli.net/2023/05/30/URnYubAw7DNpIKk.png" alt="双向拖放设置"><br><font color=Red>注：可能会出现不能实现双向拖拽 </font><a href="https://blog.csdn.net/Dryhten/article/details/115049664">解决方法</a><br>导入作业框架后，可以使用Visual Studio Code 来查看和编辑。右键作业框<br>架的文件夹，选择使用其他应用来打开，选择Visual Studio Code。</p>
<h2 id="作业讲解"><a href="#作业讲解" class="headerlink" title="作业讲解"></a>作业讲解</h2><p>完成以上配置后终于可以开始作业的编写了，给定一个点P&#x3D;(2,1), 将该点绕原点先逆时针旋转45◦，再平移(1,2), 计算出变换后点的坐标（要求用齐次坐标进行计算）。</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;eigen3/Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;eigen3/Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Vector3f  <span class="title">p</span><span class="params">(<span class="number">2.0</span>,<span class="number">1.0</span>)</span>,Pc</span>;</span><br><span class="line">    <span class="type">float</span> a=<span class="built_in">cos</span>(<span class="number">45</span>/<span class="number">180.0</span>*<span class="built_in">acos</span>(<span class="number">-1</span>)),b=<span class="built_in">sin</span>(<span class="number">45</span>/<span class="number">180.0</span>*<span class="built_in">acos</span>(<span class="number">-1</span>));</span><br><span class="line">    Matrix3f R,M;</span><br><span class="line">    R&lt;&lt;a,-b,<span class="number">0</span>,b,a,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line">    M&lt;&lt;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line">    Pc=M*R*p;</span><br><span class="line">    cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;Pc&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码完成后就是编译过程，打开终端依次输入一下命令：<br> <figure class="highlight console"><table><tr><td class="code"><pre><span class="line">mkdir build </span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">./Transformation</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>GAMES101</category>
        <category>assignment</category>
      </categories>
      <tags>
        <tag>GAMES101</tag>
      </tags>
  </entry>
  <entry>
    <title>非遗Web可视化平台</title>
    <url>/2024/04/01/%E9%9D%9E%E9%81%97/</url>
    <content><![CDATA[<h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><p>非物质文化遗产面向了普通大众，达到了宣传和保护非物质文化 遗产的目的，同时也为广大非遗爱好者提供学习了解的便捷途径。所 以本系统面向的人群为：广大人民群众、非物质文化遗产爱好者、非 物质文化遗产探索者、非物质文化遗产传承人和有关非物质文化遗产 研究学者等。 对此本系统可以提供向用户直观的展示非物质文化遗 产的综合查询界面，为用户提供地图定位、寻遗等综合查询功能，非 遗分布聚集分析、非遗类别结构分析、气候适宜性非遗分布分析、地 区 GDP 与非遗分布分析等专题图分析，新闻动态、新闻发布、非物 质文化遗产的录入、面积及距离测量、复位、清除要素等辅助功能。</p>
<h2 id="内容展示"><a href="#内容展示" class="headerlink" title="内容展示"></a>内容展示</h2><p><img src="/img/fy_main.png" alt="主页面"></p>
]]></content>
      <categories>
        <category>projects</category>
      </categories>
      <tags>
        <tag>projects</tag>
      </tags>
  </entry>
  <entry>
    <title>背包问题</title>
    <url>/2024/04/01/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="背包递推公式"><a href="#背包递推公式" class="headerlink" title="背包递推公式"></a>背包递推公式</h1><ul>
<li>问能否能装满背包（或者最多装多少）：<br>dp[j] &#x3D; max(dp[j], dp[j - nums[i]] + nums[i])，对应题目：</li>
</ul>
<ul>
<li>分割等和子集：<a href="https://programmercarl.com/0416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.html">https://programmercarl.com/0416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.html</a></li>
<li>最后一块石头的重量：<a href="https://programmercarl.com/1049.%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8FII.html">https://programmercarl.com/1049.%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8FII.html</a></li>
</ul>
<ul>
<li>问装满背包有几种方法：dp[j] +&#x3D; dp[j - nums[i]]，对应题目：</li>
</ul>
<ul>
<li>目标和：<a href="https://programmercarl.com/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.html">https://programmercarl.com/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.html</a></li>
<li>零钱兑换： <a href="https://programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html">https://programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html</a></li>
<li>组合总和：<a href="https://programmercarl.com/0377.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%E2%85%A3.html">https://programmercarl.com/0377.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%E2%85%A3.html</a></li>
<li>爬楼梯进阶版（完全背包）：<a href="https://programmercarl.com/0377.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%E2%85%A3.html">https://programmercarl.com/0377.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%E2%85%A3.html</a></li>
</ul>
<ul>
<li>问背包装满最大价值：dp[j] &#x3D; max(dp[j], dp[j - weight[i]] + value[i])，对应题目：</li>
</ul>
<ul>
<li>一和零：<a href="https://programmercarl.com/0474.%E4%B8%80%E5%92%8C%E9%9B%B6.html">https://programmercarl.com/0474.%E4%B8%80%E5%92%8C%E9%9B%B6.html</a></li>
</ul>
<ul>
<li>问装满背包所有物品的最小个数：dp[j] &#x3D; min(dp[j - coins[i]] + 1, dp[j]); ，对应题目如下：</li>
</ul>
<ul>
<li>零钱兑换：<a href="https://programmercarl.com/0322.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.html">https://programmercarl.com/0322.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.html</a></li>
<li>完全平方数：<a href="https://programmercarl.com/0279.%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0.html">https://programmercarl.com/0279.%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0.html</a></li>
</ul>
<h1 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h1><h3 id="每个物品只有一个，要么选要么不选"><a href="#每个物品只有一个，要么选要么不选" class="headerlink" title="每个物品只有一个，要么选要么不选"></a>每个物品只有一个，要么选要么不选</h3><ul>
<li>二维矩阵dp<br>dp[i][j]表示从下标为[0-i]的物品里任意取，放进容量为j的背包，<strong>价值总和最大</strong>是多少<br><strong>分析</strong>：</li>
</ul>
<ul>
<li>不放物品i:由dp[i-1][j]推出，dp[i][j]&#x3D;dp[i-1][j]。</li>
<li>放物品i: 由dp[i-1][j-w[i]]推出，dp[i][j]&#x3D;dp[i-1][j-w[i]]+v[i]。<br>综上dp[i][j] &#x3D; max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);<br><strong>初始化</strong>：</li>
<li>dp[i][0]&#x3D;0;</li>
<li>j&lt; w[0],dp[0][j]&#x3D;0;</li>
<li>j&gt;&#x3D; w[0],dp[0][j]&#x3D;v[0];</li>
</ul>
<ul>
<li>一维向量dp<br>以上可以发现dp[i][:]只与dp[i-1][:]这一行有关，那么可以发现如果把dp[i - 1]那一层拷贝到dp[i]上，表达式完全可以是：dp[i][j] &#x3D; max(dp[i][j], dp[i][j - weight[i]] + value[i])。<br>与其把dp[i - 1]这一层拷贝到dp[i]上，不如只用一个一维数组了，只用dp[j]（一维数组，也可以理解是一个滚动数组）。<br>dp[j]表示：容量为j的背包，所背的物品价值可以最大为dp[j]。<br>dp[j]可以通过dp[j - weight[i]]推导出来，dp[j - weight[i]]表示容量为j - weight[i]的背包所背的最大价值。此时dp[j]有两个选择，一个是取自己dp[j] 相当于 二维dp数组中的dp[i-1][j]，即不放物品i，一个是取dp[j - weight[i]] + value[i]，即放物品i，指定是取最大的，毕竟是求最大价值，<br>dp[j] &#x3D; max(dp[j], dp[j - weight[i]] + value[i]);<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; weight.<span class="built_in">size</span>(); i++) </span><br><span class="line">&#123; <span class="comment">// 遍历物品     </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = bagWeight; j &gt;= weight[i]; j--)     </span><br><span class="line">        &#123; <span class="comment">// 遍历背包容量         </span></span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight[i]] + value[i]);      </span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<strong>倒序遍历背包重量是为了保证物品i只被放入一次！</strong></li>
</ul>
<h1 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h1><h3 id="每个物品有无数个，要么不选要么随便选"><a href="#每个物品有无数个，要么不选要么随便选" class="headerlink" title="每个物品有无数个，要么不选要么随便选"></a>每个物品有无数个，要么不选要么随便选</h3><p>由此，通过对01背包分析，只需要正序遍历物品即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; weight.<span class="built_in">size</span>(); i++)  </span><br><span class="line">&#123; <span class="comment">// 遍历物品          </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = weight[i]; j &lt;= bagWeight; j++)</span><br><span class="line">    &#123; <span class="comment">// 遍历背包容量                      </span></span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight[i]] + value[i]);               </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h1 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h1><h3 id="不同物品数量不同"><a href="#不同物品数量不同" class="headerlink" title="不同物品数量不同"></a>不同物品数量不同</h3><p>把多个数量的物品看成独立的一个，转化为01背包</p>
<h1 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h1><h3 id="按组打包，每组最多选一个"><a href="#按组打包，每组最多选一个" class="headerlink" title="按组打包，每组最多选一个"></a>按组打包，每组最多选一个</h3><p>分组后把每个组的物品看成一个，转化为01背包<br>例题购物单：<a href="https://www.nowcoder.com/practice/f9c6f980eeec43ef85be20755ddbeaf4?tpId=37&tqId=21239&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=3&judgeStatus=undefined&tags=&title=">https://www.nowcoder.com/practice/f9c6f980eeec43ef85be20755ddbeaf4?tpId=37&amp;tqId=21239&amp;rp=1&amp;ru=/exam/oj/ta&amp;qru=/exam/oj/ta&amp;sourceUrl=%2Fexam%2Foj%2Fta%3FtpId%3D37&amp;difficulty=3&amp;judgeStatus=undefined&amp;tags=&amp;title=</a></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>时序预测</title>
    <url>/2024/04/02/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B/</url>
    <content><![CDATA[<h2 id="现存问题"><a href="#现存问题" class="headerlink" title="现存问题"></a>现存问题</h2><p>准确预测时序数据具有挑战性</p>
<h2 id="现有时序建模方法"><a href="#现有时序建模方法" class="headerlink" title="现有时序建模方法"></a>现有时序建模方法</h2><ol>
<li>马尔科夫假设<br>每次观察都是基于前一个值</li>
</ol>
<ul>
<li>HMM</li>
<li>动态贝叶斯网络</li>
<li>卡尔曼滤波</li>
<li>RIMA， ARIMA</li>
</ul>
<ol start="2">
<li>RNN<br>能发现数据的非线性复杂的长时间关系</li>
</ol>
<ul>
<li>RNN&#x2F;LSTM&#x2F;GRU</li>
<li>Conv-LSTM….</li>
</ul>
<ol start="3">
<li>Transformer<br>并行建模和捕捉长时间依赖</li>
</ol>
<h2 id="时序的特征"><a href="#时序的特征" class="headerlink" title="时序的特征"></a>时序的特征</h2><p>时序序列的统计特征随时间变化，时序从局部上看是服从某一分布，由此时序可以看作是由若干个分布组成。</p>
<p>时序协方差漂移（Temporal Covariate Shift–TCS）:段内分布一样，段之间分布变化<br><img src="https://s2.loli.net/2024/04/02/ycTrm4Ln79ovJWf.png" alt="TCS"></p>
<p>方差漂移（Covariate Shift–CS）<br><img src="https://s2.loli.net/2024/04/02/vQk1f4TPYhi7KgH.png" alt="CS"></p>
<h2 id="AdaRNN：Adaptive-RNNs"><a href="#AdaRNN：Adaptive-RNNs" class="headerlink" title="AdaRNN：Adaptive RNNs"></a>AdaRNN：Adaptive RNNs</h2><ul>
<li>zhihu: <a href="https://zhuanlan.zhihu.com/p/398036372">https://zhuanlan.zhihu.com/p/398036372</a></li>
<li>github: <a href="https://github.com/Yang-Qirui/">https://github.com/Yang-Qirui/</a> AdaRNN-for-Battery?tab&#x3D;readme-ov-file</li>
<li>bilibili: <a href="https://www.bilibili.com/video/BV1Gh411B7rj/?vd_source=78b60f07b8ecb9de4ed498a7f3d7190c">https://www.bilibili.com/video/BV1Gh411B7rj/?vd_source=78b60f07b8ecb9de4ed498a7f3d7190c</a></li>
</ul>
<p><img src="https://s2.loli.net/2024/04/02/bMOw81qU7ucJQe5.png" alt="AdaRNN"></p>
<p><a href="AdaRNN.md">AdaRNN笔记</a></p>
<ul>
<li>TDC<br><img src="https://s2.loli.net/2024/04/02/RNiz9BQmbZ1OYxr.png" alt="TDC"></li>
</ul>
<ul>
<li>找到K个最不相似的段，这是应为可以多样化分布信息，提升模型泛化能力</li>
<li>优化目标：最大化不相似性</li>
</ul>
<ul>
<li>TDM<br><img src="https://s2.loli.net/2024/04/02/YBIKapC7gndc6zw.png" alt="TDM"><br><img src="https://s2.loli.net/2024/04/02/W1GjKPbMioxOHEI.png" alt="TDM(cont.)"><br><img src="https://s2.loli.net/2024/04/02/6VhxrZz1CBpPwEm.png" alt="weight matrix"></li>
</ul>
]]></content>
      <categories>
        <category>time-series</category>
      </categories>
      <tags>
        <tag>time-series</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串处理</title>
    <url>/2024/04/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="字符串库"><a href="#字符串库" class="headerlink" title="字符串库"></a>字符串库</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="字符串构造"><a href="#字符串构造" class="headerlink" title="字符串构造"></a>字符串构造</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string str = <span class="string">&quot;copy&quot;</span>;   </span><br><span class="line"><span class="type">char</span> *ch = <span class="string">&quot;chars&quot;</span>;   </span><br><span class="line"><span class="comment">//1 constructor   </span></span><br><span class="line">string str1; <span class="comment">//生成一个空字符串 </span></span><br><span class="line"><span class="function">string <span class="title">str2</span><span class="params">(str)</span></span>;  <span class="comment">//拷贝构造函数，生成str的副本</span></span><br><span class="line"><span class="function">string <span class="title">str3</span><span class="params">(<span class="string">&quot;hello&quot;</span>,<span class="number">1</span>,<span class="number">2</span>)</span></span>;<span class="comment">//取字符串位置1开始长度2的子字符串   </span></span><br><span class="line"><span class="function">string <span class="title">str4</span><span class="params">(ch)</span></span>;<span class="comment">//char数组转字符串 </span></span><br><span class="line"><span class="function">string <span class="title">str5</span><span class="params">(ch, <span class="number">2</span>)</span></span>; <span class="comment">//取字符串ch的前两个字符   </span></span><br><span class="line"><span class="function">string <span class="title">str6</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>)</span></span>;<span class="comment">// 生成长度为10值全为&#x27;c&#x27;的字符串</span></span><br></pre></td></tr></table></figure>
<h2 id="与容器共有的方法（使用迭代器）"><a href="#与容器共有的方法（使用迭代器）" class="headerlink" title="与容器共有的方法（使用迭代器）"></a>与容器共有的方法（使用迭代器）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.<span class="built_in">insert</span>(p,t); <span class="comment">//在迭代器p指向的元素执勤啊插入一个值为t的新元素，返回指向新插入元素的迭代器</span></span><br><span class="line">s.<span class="built_in">insert</span>(p,n,t); <span class="comment">//在迭代器p指向的元素之前插入n个值为t的新元素</span></span><br><span class="line">s.<span class="built_in">insert</span>(p,b,e); <span class="comment">//在迭代器p指向的元素之前插入迭代器b和e标记范围内所有的元素，返回void</span></span><br><span class="line">s.<span class="built_in">assign</span>(b,e); <span class="comment">//在迭代器b和e标记范围内的元素替换s，返回s，容器返回void</span></span><br><span class="line">s.<span class="built_in">assign</span>(n,t); <span class="comment">//用值为t的n个副本替换s,s类型返回s，容器返回void</span></span><br><span class="line">s.<span class="built_in">erase</span>(p); <span class="comment">//删除迭代器p指向的元素。返回一个迭代器，指向被删除元素后面的元素</span></span><br><span class="line">s.<span class="built_in">erase</span>(b,e); <span class="comment">//删除迭代器b和e标记范围内的所有元素。返回一个迭代器，指向被删除元素段后面的元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="string使用下标的方法"><a href="#string使用下标的方法" class="headerlink" title="string使用下标的方法"></a>string使用下标的方法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.<span class="built_in">insert</span>(pos,n,c); <span class="comment">//在下标pos的元素之前插入n个字符c</span></span><br><span class="line">s.<span class="built_in">insert</span>(pos,s2); <span class="comment">//在下标pos的元素之前插入string对象s2</span></span><br><span class="line">s.<span class="built_in">insert</span>(pos,s2,pos2,len); <span class="comment">//在下标为pos的元素之前插入s2中从下标pos2开始的len个字符</span></span><br><span class="line">s.<span class="built_in">insert</span>(pos,cp,len); <span class="comment">// 在下标为pos的元素之前插入cp所指向数组的前len个字符</span></span><br><span class="line">s.<span class="built_in">insert</span>(pos,cp); <span class="comment">// 在下标为pos的元素之前插入cp所指向的以空字符结束的字符串副本</span></span><br><span class="line">s.<span class="built_in">assign</span>(s2); <span class="comment">//用s2的副本替换s</span></span><br><span class="line">s.<span class="built_in">assign</span>(s2,pos,len); <span class="comment">//用s2中从下标pos2开始的len个字符替换s</span></span><br><span class="line">s.<span class="built_in">assign</span>(cp,len); <span class="comment">//用cp所指向数组的前len个字符副本替换s</span></span><br><span class="line">s.<span class="built_in">assign</span>(cp); <span class="comment">// 用cp所指向的以空字符结束的自付出替换s</span></span><br><span class="line">s.<span class="built_in">erase</span>(pos,len); <span class="comment">// 删除从下标pos开始的len个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找功能</span></span><br><span class="line">s.<span class="built_in">find</span>(args); <span class="comment">//在s中查找args的第一次出现</span></span><br><span class="line">s.<span class="built_in">rfind</span>(args); <span class="comment">//在s中查找args的最后一次出现</span></span><br><span class="line">s.<span class="built_in">find_first_of</span>(args); <span class="comment">//在s中查找args的任意字符的第一次出现</span></span><br><span class="line">s.<span class="built_in">find_last_of</span>(args); <span class="comment">//在s中查找args的任意字符的最后出现</span></span><br><span class="line">s.<span class="built_in">find_first_not_of</span>(args); <span class="comment">//在s中查找第一个不属于args的字符</span></span><br><span class="line">s.<span class="built_in">find_last_not_of</span>(args); <span class="comment">//在s中查找最后一个不属于args的字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//比较功能</span></span><br><span class="line">str1.<span class="built_in">compare</span>(str2); <span class="comment">//如果相等则输出为0，str1&gt;str2输出大于0，否则输出小于0</span></span><br><span class="line">str1.<span class="built_in">compare</span>(m,n,str); <span class="comment">//str1的子串（从m开始的n个字符）与str2比较</span></span><br><span class="line">str1.<span class="built_in">compare</span>(m,n,str2,m,n); <span class="comment">//str1的子串（从m开始的n个字符）与str2的子串（从m开始的n个字符）比较</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝、转整数等</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">to_string</span>(val)	<span class="comment">//将数值 val 转换为 string 并返回。val 可以是任何算术类型（int、浮点型等）</span></span><br><span class="line"><span class="built_in">stoi</span>(s) / <span class="built_in">atoi</span>(c)	<span class="comment">//字符串/字符 转换为整数并返回</span></span><br><span class="line"><span class="built_in">stof</span>(s) / <span class="built_in">atof</span>(s)	<span class="comment">//字符串/字符 转换为浮点数并返回</span></span><br><span class="line">s.<span class="built_in">substr</span>(pos, n)	<span class="comment">//从索引 pos 开始，提取连续的 n 个字符，包括 pos 位置的字符</span></span><br><span class="line"><span class="built_in">reverse</span>(s2.<span class="built_in">begin</span>(), s2.<span class="built_in">end</span>())	<span class="comment">//反转 string 定义的字符串 s2 （加头文件 &lt;algorithm&gt; </span></span><br></pre></td></tr></table></figure>

<h2 id="cctype头文件（判断字符类型：大-小写字母、标点、数字等）"><a href="#cctype头文件（判断字符类型：大-小写字母、标点、数字等）" class="headerlink" title="cctype头文件（判断字符类型：大&#x2F;小写字母、标点、数字等）"></a>cctype头文件（判断字符类型：大&#x2F;小写字母、标点、数字等）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isalnum</span>(c)  <span class="comment">// 当是字母或数字时为真 </span></span><br><span class="line"><span class="built_in">isalpha</span>(c)  <span class="comment">// 当是字母时为真 </span></span><br><span class="line"><span class="built_in">isdigit</span>(c)  <span class="comment">// 当是数字是为真 </span></span><br><span class="line"><span class="built_in">islower</span>(c)  <span class="comment">// 当是小写字母时为真 </span></span><br><span class="line"><span class="built_in">isupper</span>(c)  <span class="comment">// 当是大写字母时为真 </span></span><br><span class="line"><span class="built_in">isspace</span>(c)  <span class="comment">// 当是空白（空格、回车、换行、制表符等）时为真 </span></span><br><span class="line"><span class="built_in">isxdigit</span>(c) <span class="comment">// 当是16进制数字是为真 </span></span><br><span class="line"><span class="built_in">ispunct</span>(c)  <span class="comment">// 当是标点符号时为真（即c不是 控制字符、数字、字母、可打印空白 中的一种） </span></span><br><span class="line"><span class="built_in">isprint</span>(c)  <span class="comment">// 当时可打印字符时为真（即c是空格或具有可见形式） </span></span><br><span class="line"><span class="built_in">isgraph</span>(c)  <span class="comment">// 当不是空格但可打印时为真 </span></span><br><span class="line"><span class="built_in">iscntrl</span>(c)  <span class="comment">// 当是控制字符时为真 </span></span><br><span class="line"><span class="built_in">tolower</span>(c)  <span class="comment">// 若c是大写字母，转换为小写输出，否则原样输出 </span></span><br><span class="line"><span class="built_in">toupper</span>(c)  <span class="comment">// 类似上面的</span></span><br></pre></td></tr></table></figure>


<h2 id="正则化判断字符格式"><a href="#正则化判断字符格式" class="headerlink" title="正则化判断字符格式"></a>正则化判断字符格式</h2><p>参考：<a href="https://blog.csdn.net/weixin_43229348/article/details/124656388">https://blog.csdn.net/weixin_43229348/article/details/124656388</a><br>字符串题目通常会规定某个输入格式，判断是否符合该格式可以使用正则化，例如题目<a href="https://www.nowcoder.com/practice/119bcca3befb405fbe58abe9c532eb29?tpId=37&tqId=21240&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj&difficulty=undefined&judgeStatus=undefined&tags=&title=">https://www.nowcoder.com/practice/119bcca3befb405fbe58abe9c532eb29?tpId=37&amp;tqId=21240&amp;rp=1&amp;ru=/exam/oj&amp;qru=/exam/oj&amp;sourceUrl=%2Fexam%2Foj&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=</a></p>
<p>正则匹配中的基础符号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^开头 </span><br><span class="line">()组 </span><br><span class="line">[]或, </span><br><span class="line">&#123;&#125;几次 </span><br><span class="line">$结尾</span><br></pre></td></tr></table></figure>
<p>正则化头文件为 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;regex&gt;</span> </span></span><br></pre></td></tr></table></figure>
<p>函数有</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">regex_match</span>(str,regexp) <span class="comment">//判断字符串str是否符合正则表达式regexp</span></span><br><span class="line"><span class="built_in">regex_search</span>(mystr, m, regexp) <span class="comment">//查找字符串mystr中符合regexp的子字符串</span></span><br><span class="line"></span><br><span class="line">smatch m;          </span><br><span class="line"><span class="comment">// regex_search that searches pattern regexp in the string mystr      </span></span><br><span class="line"> <span class="built_in">regex_search</span>(mystr, m, regexp);         cout&lt;&lt;<span class="string">&quot;String that matches the pattern:&quot;</span>&lt;&lt;endl;     <span class="keyword">for</span> (<span class="keyword">auto</span> x : m)          </span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;      </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> <span class="built_in">regex_replace</span>() <span class="comment">//用于用字符串替换与正则表达式匹配的模式</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h2><p>题目：<a href="https://www.nowcoder.com/practice/5190a1db6f4f4ddb92fd9c365c944584?tpId=37&tqId=21249&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">https://www.nowcoder.com/practice/5190a1db6f4f4ddb92fd9c365c944584?tpId=37&amp;tqId=21249&amp;rp=1&amp;ru=/exam/oj/ta&amp;qru=/exam/oj/ta&amp;sourceUrl=%2Fexam%2Foj%2Fta%3FtpId%3D37&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="type">char</span> str[<span class="number">1000</span>]; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;     </span><br><span class="line">   string s;     </span><br><span class="line">   <span class="built_in">getline</span>(cin, s);     </span><br><span class="line">   <span class="type">int</span> k=<span class="number">0</span>;     </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)    <span class="comment">//用每个字母遍历保证字母顺序</span></span><br><span class="line">   &#123;         </span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;s.<span class="built_in">size</span>();j++)         &#123;             </span><br><span class="line">         <span class="keyword">if</span>(s[j]-<span class="string">&#x27;a&#x27;</span>==i||s[j]-<span class="string">&#x27;A&#x27;</span>==i)                 str[k++]=s[j];         </span><br><span class="line">      &#125;     </span><br><span class="line">   &#125;     </span><br><span class="line">   k=<span class="number">0</span>;     </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)              </span><br><span class="line">   &#123;         </span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">isalpha</span>(s[i]))             </span><br><span class="line">      s[i]=str[k++];         </span><br><span class="line">      cout&lt;&lt;s[i];     </span><br><span class="line">   &#125;     </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/04/03/AdaRNN/</url>
    <content><![CDATA[<hr>
<pre><code>title: AdaRNN笔记 
tags: AdaRNN
categories: 
- time-series 
</code></pre>
<hr>
<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>数据集：<a href="https://box.nju.edu.cn/f/2239259e06dd4f4cbf64/?dl=1">https://box.nju.edu.cn/f/2239259e06dd4f4cbf64/?dl=1</a></p>
<p>该数据集是空气质量数据集包含 2013&#x2F;3 至 2017&#x2F;2 期间从北京 12 个站点收集的每小时空气质量信息。代码使用数据是选择了4个观测站 (Dongsi, Tiantan, Nongzhanguan, and Dingling) 和6个特征 (PM2.5, PM10, S02, NO2, CO, and O3)。由于存在一些缺失数据，我们只需使用平均值来填补空缺。然后，在将数据集输入网络之前对其进行归一化处理，以便将所有特征缩放到相同的范围内。这个过程是通过最大最小归一化来完成的，数据范围介于 0 和 1 之间。</p>
<p>生成的 .pkl 文件包含三个序列：”特征”、”标签 “和 “标签调节”。标签 “是指空气质量的分类标签（如优、良、中），在本工作中没有使用，可以忽略。label_reg “指预测值。</p>
<p>数据模式：TDC和pre_process</p>
<ul>
<li>TDC<br>该方法是对时序进行划分，具体代码如下<br><img src="https://s2.loli.net/2024/04/03/waLcI2FY6JysQRg.png" alt="TDC1"><br><img src="https://s2.loli.net/2024/04/03/rsONB9UDZl2HePh.png" alt="TDC2"></li>
</ul>
<p>其中<strong>num_domain</strong>是时序的多样性区域个数</p>
<h2 id="模型框架"><a href="#模型框架" class="headerlink" title="模型框架"></a>模型框架</h2><p>该算法使用的优化其是Adam</p>
]]></content>
  </entry>
  <entry>
    <title>回文子串</title>
    <url>/2024/04/04/%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><ul>
<li><a href="https://www.nowcoder.com/practice/3cd4621963e8454594f00199f4536bb1?tpId=37&tqId=21255&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">https://www.nowcoder.com/practice/3cd4621963e8454594f00199f4536bb1?tpId=37&amp;tqId=21255&amp;rp=1&amp;ru=/exam/oj/ta&amp;qru=/exam/oj/ta&amp;sourceUrl=%2Fexam%2Foj%2Fta%3FtpId%3D37&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=</a></li>
<li><a href="https://leetcode.cn/problems/palindromic-substrings/description/">https://leetcode.cn/problems/palindromic-substrings/description/</a></li>
<li><a href="https://programmercarl.com/0516.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97.html#%E6%80%9D%E8%B7%AF">https://programmercarl.com/0516.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97.html#%E6%80%9D%E8%B7%AF</a></li>
</ul>
<h1 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h1><p><a href="https://programmercarl.com/0647.%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.html#%E6%80%9D%E8%B7%AF">https://programmercarl.com/0647.%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.html#%E6%80%9D%E8%B7%AF</a></p>
<p>使用动态规划求解，用矩阵bool dp[n][n]表示，其中dp[i][j]表示区间[i,j]的子串是否是回文串。<br>分析：</p>
<ul>
<li>s[i]!&#x3D;s[j]–&gt;dp[i][j]&#x3D;false</li>
<li>s[i]&#x3D;&#x3D;s[j]:</li>
</ul>
<ul>
<li>i&#x3D;&#x3D;j–&gt;dp[i][j]&#x3D;true</li>
<li>j-i&#x3D;&#x3D;1–&gt;dp[i][j]&#x3D;true;</li>
<li>j-i&gt;1&amp;&amp;dp[i+1][j-1]&#x3D;&#x3D;true–&gt;dp[i][j]&#x3D;true<br>当dp[i][j]&#x3D;&#x3D;true时更新长度取最长的情况max(len,j-i+1);<br>** 注：** 由于每次查看dp状态是需要看i+1时的情况所以i的遍历是反向遍历</li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/2024/04/12/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="链表库"><a href="#链表库" class="headerlink" title="链表库"></a>链表库</h1><ul>
<li>单向链表<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt; forward_list &gt;</span> <span class="comment">//单向链表</span></span></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">    forward_list&lt;<span class="type">int</span>&gt;  l;<span class="comment">//构造空的单向链表</span></span><br><span class="line">    <span class="function">forward_list&lt;<span class="type">int</span>&gt;  <span class="title">l2</span><span class="params">(<span class="number">5</span>)</span></span>;<span class="comment">//构造5个元素的单向链表，值为类型的默认值</span></span><br><span class="line">    <span class="function">forward_list&lt;<span class="type">int</span>&gt;  <span class="title">l3</span><span class="params">(<span class="number">5</span>,<span class="number">111</span>)</span></span>;<span class="comment">//构造5个元素的单向链表，每个元素值为111</span></span><br><span class="line">    <span class="function">forward_list&lt;<span class="type">int</span>&gt;  <span class="title">l4</span><span class="params">(l3)</span></span>;<span class="comment">//拷贝构造 </span></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">    l.<span class="built_in">push_front</span>(<span class="number">111</span>);<span class="comment">//从头部插入元素</span></span><br><span class="line">    l.<span class="built_in">insert_after</span>(l.<span class="built_in">begin</span>(), <span class="number">444</span>);<span class="comment">//在某个迭代器后面插入 </span></span><br><span class="line">    l.<span class="built_in">pop_front</span>();<span class="comment">//删除头结点</span></span><br><span class="line">    l.<span class="built_in">erase_after</span>(l.<span class="built_in">begin</span>());<span class="comment">//删除迭代器节点的下一个</span></span><br><span class="line">    l.<span class="built_in">erase_after</span>(l.<span class="built_in">begin</span>(),l.<span class="built_in">end</span>());<span class="comment">//删除迭代器区间</span></span><br><span class="line">    l.<span class="built_in">clear</span>();<span class="comment">//删除所有元素</span></span><br><span class="line">    <span class="type">int</span> front;</span><br><span class="line">    <span class="keyword">auto</span> it=<span class="built_in">find</span>(l.<span class="built_in">begin</span>(), l.<span class="built_in">end</span>(), front); <span class="comment">//找第front个位置</span></span><br><span class="line">    l.<span class="built_in">remove</span>(last);    <span class="comment">//移除具有该值的节点     </span></span><br></pre></td></tr></table></figure></li>
<li>双向链表<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;list&gt;</span> <span class="comment">//双向链表</span></span></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">    list&lt;T&gt; l; <span class="comment">//空的双向链表</span></span><br><span class="line">    <span class="function">list&lt;T&gt; <span class="title">l1</span><span class="params">(<span class="number">5</span>)</span></span>; <span class="comment">//初始化5个元素，默认值为类型的默认值</span></span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">l3</span><span class="params">(<span class="number">5</span>,<span class="number">111</span>)</span></span>;<span class="comment">//初始化5个元素，每个元素初始值为111</span></span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">l4</span><span class="params">( l3 )</span></span>;<span class="comment">//拷贝构造</span></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">    l.<span class="built_in">size</span>(); <span class="comment">//链表长度</span></span><br><span class="line">    l.<span class="built_in">push_front</span>(<span class="number">111</span>); <span class="comment">//头部插入一个节点</span></span><br><span class="line">    l.<span class="built_in">push_back</span>(<span class="number">444</span>); <span class="comment">//尾部插入一个节点（list容器肯定知道尾部的位置）  </span></span><br><span class="line">    l.<span class="built_in">insert</span>(l.<span class="built_in">begin</span>(), <span class="number">222</span>); <span class="comment">//在某个迭代器的位置之前插入</span></span><br><span class="line">    l.<span class="built_in">insert</span>(l.<span class="built_in">begin</span>(), <span class="number">3</span>,<span class="number">333</span>); <span class="comment">//在某个迭代器的位置之前插入n个相同值元素</span></span><br><span class="line">    l.<span class="built_in">front</span>();  <span class="comment">//访问链表第一个元素</span></span><br><span class="line">    l.<span class="built_in">back</span>();  <span class="comment">//访问链表最后一个元素</span></span><br><span class="line">    l.<span class="built_in">pop_front</span>(); <span class="comment">//删除链表头的元素</span></span><br><span class="line">    l.<span class="built_in">pop_back</span>(); <span class="comment">//删除链表尾的元素</span></span><br><span class="line">    l.<span class="built_in">erase</span>(l.<span class="built_in">begin</span>()); <span class="comment">//删除某个迭代器指向的元素</span></span><br><span class="line">    l.<span class="built_in">erase</span>(l.<span class="built_in">begin</span>(),l.<span class="built_in">end</span>()); <span class="comment">//删除一段迭代器区间</span></span><br><span class="line">    l.<span class="built_in">clear</span>(); <span class="comment">//清空链表    </span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><p><a href="https://www.nowcoder.com/practice/f96cd47e812842269058d483a11ced4f?tpId=37&tqId=21271&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">https://www.nowcoder.com/practice/f96cd47e812842269058d483a11ced4f?tpId=37&amp;tqId=21271&amp;rp=1&amp;ru=/exam/oj/ta&amp;qru=/exam/oj/ta&amp;sourceUrl=%2Fexam%2Foj%2Fta%3FtpId%3D37&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=</a><br>解题：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;          </span><br><span class="line">    <span class="type">int</span> n,head;          </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;head;    <span class="comment">//输入结点数和头结点的值          </span></span><br><span class="line">    forward_list&lt;<span class="type">int</span>&gt; linklist;    <span class="comment">//创建一个单向链表          </span></span><br><span class="line">    linklist.<span class="built_in">push_front</span>(head);    <span class="comment">//初始化头结点          </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)      </span><br><span class="line">    &#123;                  </span><br><span class="line">        <span class="type">int</span> front,back;                  cin&gt;&gt;back&gt;&gt;front;                  </span><br><span class="line">        <span class="keyword">auto</span> it=<span class="built_in">find</span>(linklist.<span class="built_in">begin</span>(), linklist.<span class="built_in">end</span>(), front);                  </span><br><span class="line">        linklist.<span class="built_in">insert_after</span>(it, back);    <span class="comment">//逐个插入结点          </span></span><br><span class="line">    &#125;          </span><br><span class="line">    <span class="type">int</span> last;          </span><br><span class="line">    cin&gt;&gt;last;    <span class="comment">//输入要删除的结点值          </span></span><br><span class="line">    linklist.<span class="built_in">remove</span>(last);    <span class="comment">//移除具有该值的节点          </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=linklist.<span class="built_in">begin</span>();it!=linklist.<span class="built_in">end</span>();it++)      </span><br><span class="line">    &#123;                  </span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;    <span class="comment">//从头到尾输出链表的值          </span></span><br><span class="line">    &#125;          </span><br><span class="line">    cout&lt;&lt;endl;          </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>四则运算</title>
    <url>/2024/04/12/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%20copy/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.nowcoder.com/practice/9999764a61484d819056f807d2a91f1e?tpId=37&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=&judgeStatus=&tags=&title=&gioEnter=menu">https://www.nowcoder.com/practice/9999764a61484d819056f807d2a91f1e?tpId=37&amp;rp=1&amp;ru=%2Fexam%2Foj%2Fta&amp;qru=%2Fexam%2Foj%2Fta&amp;sourceUrl=%2Fexam%2Foj%2Fta%3FtpId%3D37&amp;difficulty=&amp;judgeStatus=&amp;tags=&amp;title=&amp;gioEnter=menu</a></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>判断加减号是操作符还是正负号，使用flag进行判断，出现了数字flag为true，那么其为加减号。当出现为运算符是，flag变为false。如果flag为false那么判断为正负号。</p>
<p>符号优先级判断，当需要插入的符号优先级大于操作栈顶部的符号那么，那么进行计算直到需要插入的优先级小于等于当前顶部优先级入栈。’(‘为最高优先级，乘除优先级高于加减。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">compute</span><span class="params">(stack&lt;<span class="type">int</span>&gt;&amp; st1,stack&lt;<span class="type">char</span>&gt;&amp;st2)</span> </span>&#123;     </span><br><span class="line">   <span class="type">int</span> b=st1.<span class="built_in">top</span>();     </span><br><span class="line">   st1.<span class="built_in">pop</span>();     </span><br><span class="line">   <span class="type">int</span> a=st1.<span class="built_in">top</span>();     </span><br><span class="line">   st1.<span class="built_in">pop</span>();     </span><br><span class="line">   <span class="type">char</span> op=st2.<span class="built_in">top</span>();     </span><br><span class="line">   st2.<span class="built_in">pop</span>();     </span><br><span class="line">   <span class="keyword">if</span>(op == <span class="string">&#x27;+&#x27;</span>) a = a + b; <span class="comment">//加          </span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&#x27;-&#x27;</span>) a = a - b; <span class="comment">//减          </span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&#x27;*&#x27;</span>) a = a * b; <span class="comment">//乘          </span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&#x27;/&#x27;</span>) a = a / b; <span class="comment">//除          </span></span><br><span class="line">   st1.<span class="built_in">push</span>(a); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">priority</span><span class="params">(<span class="type">char</span> m,<span class="type">char</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">   <span class="keyword">if</span>(m==<span class="string">&#x27;(&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;     </span><br><span class="line">   <span class="keyword">if</span>((m==<span class="string">&#x27;+&#x27;</span>||m==<span class="string">&#x27;-&#x27;</span>)&amp;&amp;(n==<span class="string">&#x27;*&#x27;</span>||n==<span class="string">&#x27;/&#x27;</span>))         </span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;     </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;     </span><br><span class="line">   string s;     </span><br><span class="line">   cin&gt;&gt;s;     </span><br><span class="line">   stack&lt;<span class="type">char</span>&gt; op;     </span><br><span class="line">   stack&lt;<span class="type">int</span>&gt; num;     </span><br><span class="line">   s+=<span class="string">&#x27;)&#x27;</span>;     </span><br><span class="line">   op.<span class="built_in">push</span>(<span class="string">&#x27;(&#x27;</span>);     </span><br><span class="line">   <span class="type">int</span> flag=<span class="number">0</span>;     </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)     </span><br><span class="line">   &#123;        </span><br><span class="line">      <span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span>||s[i]==<span class="string">&#x27;&#123;&#x27;</span>||s[i]==<span class="string">&#x27;[&#x27;</span>)        </span><br><span class="line">      &#123;             </span><br><span class="line">         op.<span class="built_in">push</span>(<span class="string">&#x27;(&#x27;</span>);        </span><br><span class="line">      &#125;         </span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;)&#x27;</span>||s[i]==<span class="string">&#x27;&#125;&#x27;</span>||s[i]==<span class="string">&#x27;]&#x27;</span>)         </span><br><span class="line">      &#123;            </span><br><span class="line">         <span class="keyword">while</span>(op.<span class="built_in">top</span>()!=<span class="string">&#x27;(&#x27;</span>)            </span><br><span class="line">         &#123;                 </span><br><span class="line">            <span class="built_in">compute</span>(num, op);            </span><br><span class="line">         &#125;            </span><br><span class="line">         op.<span class="built_in">pop</span>();         </span><br><span class="line">      &#125;         </span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(flag)         </span><br><span class="line">      &#123;             </span><br><span class="line">         <span class="keyword">while</span> (<span class="built_in">priority</span>(op.<span class="built_in">top</span>(),s[i])) &#123;                 </span><br><span class="line">            <span class="built_in">compute</span>(num,op);             </span><br><span class="line">         &#125;             </span><br><span class="line">         op.<span class="built_in">push</span>(s[i]);             </span><br><span class="line">         flag=<span class="number">0</span>;         </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;             </span><br><span class="line">         <span class="type">int</span> j=i;             </span><br><span class="line">         <span class="keyword">if</span>(s[i]==<span class="string">&#x27;-&#x27;</span>||s[i]==<span class="string">&#x27;+&#x27;</span>)                 </span><br><span class="line">         i++;             </span><br><span class="line">      <span class="keyword">while</span>(<span class="built_in">isdigit</span>(s[i]))             &#123;                 </span><br><span class="line">         i++;             </span><br><span class="line">      &#125;             </span><br><span class="line">      num.<span class="built_in">push</span>(<span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(j,i-j)));             </span><br><span class="line">      i--;             </span><br><span class="line">      flag=<span class="number">1</span>;         &#125;              </span><br><span class="line">      &#125;     </span><br><span class="line">      cout&lt;&lt;num.<span class="built_in">top</span>();  &#125; <span class="comment">// 64 位输出请用 </span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>algorithm</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>stack</tag>
      </tags>
  </entry>
</search>
